name: Build Chromium (Windows x64)

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch: # Allows manual triggering
    inputs:
      chromium_version:
        description: 'Chromium version tag (e.g., 126.0.6478.57). Leave empty for latest.'
        required: false
        default: ''

jobs:
  build-chromium-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git C:\depot_tools
        echo "C:\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # Set env var to prevent depot_tools from auto-downloading an old VS version
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Fetch Chromium source code
      run: |
        echo "Fetching Chromium source code. This will take a long time..."
        # fetch will automatically create the src directory
        fetch --no-history --nohooks chromium

    - name: Checkout specific version (if specified)
      if: github.event.inputs.chromium_version != ''
      working-directory: ./src
      run: |
        echo "Checking out version tag: ${{ github.event.inputs.chromium_version }}"
        git fetch --tags
        git checkout tags/${{ github.event.inputs.chromium_version }}

    - name: Sync gclient dependencies
      working-directory: ./src
      run: |
        echo "Syncing gclient dependencies. This will take a long time..."
        # Add --with_branch_heads and --with_tags to sync dependencies correctly for a specific tag/commit
        gclient sync -D --with_branch_heads --with_tags

    - name: Cache sccache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/sccache
          ~/.cache/mozilla/sccache
        key: ${{ runner.os }}-sccache-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-sccache-

    - name: Start sccache
      uses: mozilla-actions/sccache-action@v0.0.4
      with:
        version: "v0.8.0" # Specify a recent version of sccache

    - name: Generate build files (GN)
      working-directory: ./src
      run: |
        echo "Generating build files..."
        # is_debug=false: Create a Release build
        # symbol_level=0: Do not generate debug symbols
        # is_official_build=true: Enable official build optimizations
        # proprietary_codecs=true ffmpeg_branding="Chrome": Enable proprietary codecs (H.264/AAC)
        # chrome_pgo_phase=0: Disable PGO to prevent errors from missing profiles
        # In PowerShell, double quotes inside single quotes can be stripped. We use ""Chrome"" to ensure it's passed as a string.
        gn gen out/Default --args='is_debug=false symbol_level=0 is_official_build=true proprietary_codecs=true ffmpeg_branding=""Chrome"" chrome_pgo_phase=0 cc_wrapper=""sccache""'

    - name: Compile Chromium
      working-directory: ./src
      run: |
        echo "Compiling Chromium. This is the most time-consuming step..."
        sccache --zerostats
        autoninja -C out/Default chrome
        echo "-------------------"
        echo "SCCACHE STATS"
        echo "-------------------"
        sccache --showstats

    - name: Stop sccache
      if: always() # Always run this step to ensure sccache is stopped.
      run: echo "::stop-commands::sccache-stop"

    - name: Cache sccache (save)
      if: always() # Always run this step to save the cache, even if compilation failed.
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/sccache
          ~/.cache/mozilla/sccache
        key: ${{ runner.os }}-sccache-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-sccache-

    - name: Prepare package for release
      run: |
        echo "Creating README for the release..."
        $gn_args = "is_debug=false symbol_level=0 is_official_build=true proprietary_codecs=true ffmpeg_branding='Chrome' chrome_pgo_phase=0"
        $build_date = (Get-Date).ToUniversalTime().ToString('yyyy-MM-dd HH:mm:ss "UTC"')
        $readme_content = @"
        # Chromium Build

        - **Build Date:** $build_date
        - **Branch/Commit:** ${{ github.ref }} @ ${{ github.sha }}

        ## GN Arguments
        ```
        $gn_args
        ```
        "@
        $readme_content | Out-File -FilePath "README.md" -Encoding utf8

        echo "Compressing build output..."
        Compress-Archive -Path src/out/Default/* -DestinationPath "chromium-win64.zip"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: build-${{ github.run_number }}
        name: Build #${{ github.run_number }}
        files: |
          chromium-win64.zip