name: Build OpenCV Windows Static CRT

on:
  workflow_dispatch:  # 手动触发

jobs:
  build-opencv:
    runs-on: windows-2022

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup MSBuild path
      shell: pwsh
      run: |
        # 让后续步骤能用 MSBuild 和 cl
        $vswhere = "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $vsPath = & $vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
        Write-Host "VS installation path: $vsPath"
        $env:VSINSTALLDIR = $vsPath
        $vcvarsall = Join-Path $vsPath 'VC\Auxiliary\Build\vcvarsall.bat'
        Write-Host "Running vcvarsall.bat"
        cmd /c "$vcvarsall x64 && set > env.txt"
        Get-Content env.txt | ForEach-Object {
          $parts = $_ -split '=', 2
          if ($parts.Length -eq 2) {
            Write-Host "##vso[task.setvariable variable=$($parts[0])]$($parts[1])"
          }
        }

    - name: Create build directory
      run: mkdir build

    - name: Configure OpenCV with Visual Studio 2022 and static CRT
      run: |
        cd build
        cmake ..\opencv `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_INSTALL_PREFIX=install `
          -DBUILD_SHARED_LIBS=OFF `
          -DBUILD_TESTS=OFF `
          -DBUILD_PERF_TESTS=OFF `
          -DOPENCV_EXTRA_MODULES_PATH=..\opencv_contrib\modules `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -T host=x64 `
          -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded

    - name: Build OpenCV Release
      run: cmake --build build --config Release

    - name: Install OpenCV
      run: cmake --install build --config Release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: OpenCV-windows-static
        path: build/install
